/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.blz.addressbookjdbc.tester;

import org.junit.Test;
import java.util.logging.*;

import com.blz.addressbookjdbc.controller.AddressBookMain;
import com.blz.addressbookjdbc.model.AddressBookCustomException;
import com.blz.addressbookjdbc.model.Contact;

import junit.framework.Assert;

import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.junit.Before;

@SuppressWarnings("deprecation")
public class AddressBookTest {
	private static Logger log = Logger.getLogger(AddressBookTest.class.getName());
	AddressBookMain addressBookMain = null;

	@Before
	public void setup() {
		addressBookMain = new AddressBookMain();
	}

	@Test
	public void contactsRetrivedFromDB_ShouldMatch_ActualCount() throws AddressBookCustomException {
		List<Contact> contactList = addressBookMain.readContactData();
		System.out.println(contactList);
		Assert.assertEquals(6, contactList.size());
	}

	@Test
	public void givenNewSalaryForEmployee_WhenUpdatedUsing_ShouldSyncWithDB() throws AddressBookCustomException {
		addressBookMain.readContactData();
		addressBookMain.updateContactDetails("Dev", "Barhi");
		boolean result = addressBookMain.checkContactInSyncWithDB("Dev");
		Assert.assertTrue(result);
	}

	@Test
	public void givenDateRange_WhenRetrieved_shouldMatchEmployeeCount() throws AddressBookCustomException {
		addressBookMain.readContactData();
		LocalDate startDate = LocalDate.of(2018, 01, 15);
		LocalDate endDate = LocalDate.now();
		List<Contact> contactList = addressBookMain.readContactsForGivenDateRange(startDate, endDate);
		Assert.assertEquals(3, contactList.size());
	}

	@Test
	public void givenPayrollData_WhenAverageSalaryRetrievedByGender_ShouldReturnCorrectValue()
			throws AddressBookCustomException {
		addressBookMain.readContactData();
		Map<String, Integer> contactCountByCityMap = addressBookMain.readCountOfContactsByCity();
		Assert.assertTrue(contactCountByCityMap.get("HYD").equals(3) && contactCountByCityMap.get("RNC").equals(1)
				&& contactCountByCityMap.get("Patna").equals(1) && contactCountByCityMap.get("Barhi").equals(1));
	}

	@Test
	public void givenNewEmployee_whenAdded_shouldSyncWithDB() throws AddressBookCustomException {
		addressBookMain.readContactData();
		LocalDate startDate = LocalDate.of(2018, 02, 15);
		addressBookMain.addContactToAddressBookServiceDB("Nirmal", "RNC", "Barhi", 8294966184l, "nirmalk@gmail.com",
				startDate, "Personal", "family");
		boolean result = addressBookMain.checkContactInSyncWithDB("Nirmal");
		Assert.assertTrue(result);
	}

	/*
	 * only one add multiple employee method will work as, i have set email as primary key
	 */
	@Test
	public void givenContacts_WhenAddedToDB_ShouldMatchEmployeeEntries() throws AddressBookCustomException {
		Contact[] arrayOfContacts = {
				new Contact("Ram", "RNC", "Barhi", 98654331894l, "ramlala@gmail.com", LocalDate.now(), "Casual", "friend"),
				new Contact("MoNi", "Patna", "Gaya", 96763129897l, "mounikaanne@gmail.com", LocalDate.of(2018, 12, 15),
						"Personal", "family"),
				new Contact("Divya", "Delhi", "MG", 8765578954l, "sohailsyed@gmail.com", LocalDate.now(),
						 "Professional", "Peers") };
		addressBookMain.readContactData();
		Instant start = Instant.now();
		addressBookMain.addMultipleContact(Arrays.asList(arrayOfContacts));
		Instant end = Instant.now();
		log.info("Duration without thread : " + Duration.between(start, end));
		Instant threadStart = Instant.now();
		addressBookMain.addEmployeeToPayrollWithThreads(Arrays.asList(arrayOfContacts));
		Instant threadEnd = Instant.now();
		log.info("Duartion with Thread : " + Duration.between(threadStart, threadEnd));
		addressBookMain.readContactData();
		Assert.assertEquals(6, addressBookMain.countEntries());
	}
}
